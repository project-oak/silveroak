Require Import Coq.Lists.List.
Require Import Coq.Strings.String.
Require Import Coq.ZArith.ZArith.
Require Import bedrock2.Syntax.
Require Import bedrock2.NotationsInConstr.
Require Import bedrock2.NotationsCustomEntry.
Require Import bedrock2.BasicC64Semantics.
Require Import coqutil.Word.Interface.
Import Syntax.Coercions List.ListNotations.
Local Open Scope string_scope.
Local Open Scope Z_scope.
Local Open Scope list_scope.

(* Very simplistic encoding of structs. This implementation will let
   any field read from any struct based on the offset and size. *)
Section Structs.
  Record struct_field := { offset : Z; size : access_size.access_size }.
  Definition lookup (struct_ptr : expr) (f : struct_field) : expr :=
    expr.load f.(size) (expr.op bopname.add struct_ptr (expr.literal f.(offset))).
End Structs.
Local Notation "p .! f" := (lookup p f) (at level 40).

Section Aes.
  (* aes_cfg_t struct fields *)
  Context (mode operation key_len maual_operation : struct_field).
  (* Constants from autogenerated file aes_regs.h *)
  Context (AES_CTRL_SHADOWED_0 AES_CTRL_SHADOWED_OPERATION
             AES_CTRL_SHADOWED_MODE_MASK AES_CTRL_SHADOWED_MODE_OFFSET
             AES_CTRL_SHADOWED_KEY_LEN_MASK AES_CTRL_SHADOWED_KEY_LEN_OFFSET
           : Z).
  (* Register I/O (from libs/common.h) *)
  Context (REG32_SET : string). (* TODO: is this the right encoding? *)

  (**** aes.c
    void aes_init(aes_cfg_t aes_cfg) {
      uint32_t cfg_val =
          (aes_cfg.operation << AES_CTRL_SHADOWED_OPERATION) |
          ((aes_cfg.mode & AES_CTRL_SHADOWED_MODE_MASK)
           << AES_CTRL_SHADOWED_MODE_OFFSET) |
          ((aes_cfg.key_len & AES_CTRL_SHADOWED_KEY_LEN_MASK)
           << AES_CTRL_SHADOWED_KEY_LEN_OFFSET) |
          (aes_cfg.manual_operation << AES_CTRL_SHADOWED_MANUAL_OPERATION);
      REG32(AES_CTRL_SHADOWED(0)) = cfg_val;
      REG32(AES_CTRL_SHADOWED(0)) = cfg_val;
  };
  ***)
  Definition aes_init : func :=
    let aes_cfg := "aes_cfg" in
    let cfg_val := "cfg_val" in
    ("aes_init",
     ([aes_cfg], [], bedrock_func_body:(
      stackalloc 4 as cfg_val {
      cfg_val = ((constr:(aes_cfg.!operation) << AES_CTRL_SHADOWED_OPERATION) |
                 ((constr:(aes_cfg.!mode) & AES_CTRL_SHADOWED_MODE_MASK)
                    << AES_CTRL_SHADOWED_MODE_OFFSET) |
                 ((constr:(aes_cfg.!key_len) & AES_CTRL_SHADOWED_KEY_LEN_MASK)
                   << AES_CTRL_SHADOWED_KEY_LEN_OFFSET)) ;
      output! REG32_SET ( AES_CTRL_SHADOWED_0, cfg_val ) ;
      output! REG32_SET ( AES_CTRL_SHADOWED_0, cfg_val )
    }))).
End Aes.
