Axioms:
sub_bytes_equiv
  : forall (is_decrypt : bool) (st : combType (Vec (Vec (Vec Bit 8) 4) 4)),
    unIdent (sub_bytes [is_decrypt] [st]) =
    [if is_decrypt
     then to_cols_bitvecs (inv_sub_bytes (from_cols_bitvecs st))
     else to_cols_bitvecs (AES256.sub_bytes (from_cols_bitvecs st))]
sub_bytes
  : forall (signal : SignalType -> Type) (semantics : Cava signal),
    Monad cava ->
    signal Bit ->
    signal (Vec (Vec (Vec Bit 8) 4) 4) ->
    cava (signal (Vec (Vec (Vec Bit 8) 4) 4))
shift_rows_equiv
  : forall (is_decrypt : bool) (st : combType (Vec (Vec (Vec Bit 8) 4) 4)),
    unIdent (shift_rows [is_decrypt] [st]) =
    [if is_decrypt
     then to_cols_bitvecs (inv_shift_rows (from_cols_bitvecs st))
     else to_cols_bitvecs (AES256.shift_rows (from_cols_bitvecs st))]
shift_rows
  : forall (signal : SignalType -> Type) (semantics : Cava signal),
    Monad cava ->
    signal Bit ->
    signal (Vec (Vec (Vec Bit 8) 4) 4) ->
    cava (signal (Vec (Vec (Vec Bit 8) 4) 4))
mix_columns_equiv
  : forall (is_decrypt : bool) (st : combType (Vec (Vec (Vec Bit 8) 4) 4)),
    unIdent (mix_columns [is_decrypt] [st]) =
    [if is_decrypt
     then to_cols_bitvecs (inv_mix_columns (from_cols_bitvecs st))
     else to_cols_bitvecs (AES256.mix_columns (from_cols_bitvecs st))]
mix_columns_add_round_key_comm
  : forall st k : t (t Byte.byte 4) 4,
    let to_bits :=
      fun x : t (t Byte.byte 4) 4 => to_cols_bits (BigEndian.from_cols x) in
    let from_bits :=
      fun x : t (t bool (4 * 8)) 4 => BigEndian.to_cols (from_cols_bits x) in
    AesSpec.AddRoundKey.add_round_key 32 4
      (to_bits (MixColumns.inv_mix_columns st))
      (to_bits (MixColumns.inv_mix_columns k)) =
    to_bits
      (MixColumns.inv_mix_columns
         (from_bits
            (AesSpec.AddRoundKey.add_round_key 32 4 (to_bits st) (to_bits k))))
mix_columns
  : forall (signal : SignalType -> Type) (semantics : Cava signal),
    Monad cava ->
    signal Bit ->
    signal (Vec (Vec (Vec Bit 8) 4) 4) ->
    cava (signal (Vec (Vec (Vec Bit 8) 4) 4))
key_expand_spec : nat -> t bool 128 * t bool 8 -> t bool 128 * t bool 8
key_expand_equiv
  : forall (is_decrypt : bool) (round_i : t bool 4)
      (k : t (t (t bool 8) 4) 4) (rcon : t bool 8),
    combinational (key_expand [is_decrypt] [round_i] ([k], [rcon])) =
    (let spec := if is_decrypt then inv_key_expand_spec else key_expand_spec
       in
     let kr := spec (N.to_nat (Bv2N round_i)) (flatten_key (k, rcon)) in
     ([to_cols_bitvecs (fst kr)], [snd kr]))
key_expand
  : forall (signal : SignalType -> Type) (semantics : Cava signal),
    Monad cava ->
    signal Bit ->
    signal (Vec Bit 4) ->
    signal (Vec (Vec (Vec Bit 8) 4) 4) * signal (Vec Bit 8) ->
    cava (signal (Vec (Vec (Vec Bit 8) 4) 4) * signal (Vec Bit 8))
inverse_mix_columns
  : forall (Nb : nat) (st : t (t Byte.byte 4) Nb),
    MixColumns.inv_mix_columns (MixColumns.mix_columns st) = st
inv_key_expand_spec : nat -> t bool 128 * t bool 8 -> t bool 128 * t bool 8
