     = "#include <stdint.h>
#include <memory.h>

// LITTLE-ENDIAN memory access is REQUIRED
// the following two functions are required to work around -fstrict-aliasing
static inline uintptr_t _br2_load(uintptr_t a, size_t sz) {
  uintptr_t r = 0;
  memcpy(&r, (void*)a, sz);
  return r;
}

static inline void _br2_store(uintptr_t a, uintptr_t v, size_t sz) {
  memcpy((void*)a, &v, sz);
}


void b2_aes_init(uintptr_t AES_KEY0, uintptr_t AES_IV0, uintptr_t AES_DATA_IN0, uintptr_t AES_DATA_OUT0, uintptr_t AES_CTRL, uintptr_t AES_CTRL_OPERATION, uintptr_t AES_CTRL_MODE_MASK, uintptr_t AES_CTRL_MODE_OFFSET, uintptr_t AES_CTRL_KEY_LEN_MASK, uintptr_t AES_CTRL_KEY_LEN_OFFSET, uintptr_t AES_CTRL_MANUAL_OPERATION, uintptr_t AES_STATUS, uintptr_t AES_STATUS_IDLE, uintptr_t AES_STATUS_STALL, uintptr_t AES_STATUS_OUTPUT_VALID, uintptr_t AES_STATUS_INPUT_READY, uintptr_t AES_NUM_REGS_KEY, uintptr_t AES_NUM_REGS_IV, uintptr_t AES_NUM_REGS_DATA, uintptr_t kAesEnc, uintptr_t kAesDec, uintptr_t kAesEcb, uintptr_t kAesCbc, uintptr_t kAesCtr, uintptr_t kAes128, uintptr_t kAes192, uintptr_t kAes256, uintptr_t aes_cfg_operation, uintptr_t aes_cfg_mode, uintptr_t aes_cfg_key_len, uintptr_t aes_cfg_manual_operation) {
  REG32_SET(AES_CTRL, ((((aes_cfg_operation)<<(AES_CTRL_OPERATION))|(((aes_cfg_mode)&(AES_CTRL_MODE_MASK))<<(AES_CTRL_MODE_OFFSET)))|(((aes_cfg_key_len)&(AES_CTRL_KEY_LEN_MASK))<<(AES_CTRL_KEY_LEN_OFFSET)))|((aes_cfg_manual_operation)<<(AES_CTRL_MANUAL_OPERATION)));
  return;
}

"
     : string
