Require Import Coq.Lists.List.
Require Import Coq.Strings.String.
Require Import Coq.ZArith.ZArith.
Require Import bedrock2.Semantics.
Require Import bedrock2.Syntax.
Require Import bedrock2.NotationsInConstr.
Require Import bedrock2.NotationsCustomEntry.
Require Import bedrock2.ToCString.
Require Import coqutil.Word.Interface.
Import Syntax.Coercions List.ListNotations.
Local Open Scope string_scope.
Local Open Scope Z_scope.
Local Open Scope list_scope.

Definition const := string.

(* Imports from autogenerated file aes_regs.h (global constants) *)
Class aes_regs_h :=
  { AES_CTRL_SHADOWED_0 : const;
    AES_CTRL_SHADOWED_OPERATION : const;
    AES_CTRL_SHADOWED_MODE_MASK : const;
    AES_CTRL_SHADOWED_MODE_OFFSET : const;
    AES_CTRL_SHADOWED_KEY_LEN_MASK : const;
    AES_CTRL_SHADOWED_KEY_LEN_OFFSET: const;
  }.

(* Imports from lib/common.h *)
Class common_h := {
  REG32_SET : string;
}.

Section Impl.
  Context {semantics : Semantics.parameters}.
  Context {aes_regs : aes_regs_h} {common : common_h}.

  (**** aes.c
    void aes_init(aes_cfg_t aes_cfg) {
      uint32_t cfg_val =
          (aes_cfg.operation << AES_CTRL_SHADOWED_OPERATION) |
          ((aes_cfg.mode & AES_CTRL_SHADOWED_MODE_MASK)
           << AES_CTRL_SHADOWED_MODE_OFFSET) |
          ((aes_cfg.key_len & AES_CTRL_SHADOWED_KEY_LEN_MASK)
           << AES_CTRL_SHADOWED_KEY_LEN_OFFSET) |
          (aes_cfg.manual_operation << AES_CTRL_SHADOWED_MANUAL_OPERATION);
      REG32(AES_CTRL_SHADOWED(0)) = cfg_val;
      REG32(AES_CTRL_SHADOWED(0)) = cfg_val;
  };
   ***)
  Definition aes_init : func :=
    let aes_cfg_operation := "aes_cfg_operation" in
    let aes_cfg_mode := "aes_cfg_mode" in
    let aes_cfg_key_len := "aes_cfg_key_len" in
    let cfg_val := "cfg_val" in
    let constants :=
      [AES_CTRL_SHADOWED_0; AES_CTRL_SHADOWED_OPERATION;
      AES_CTRL_SHADOWED_MODE_MASK; AES_CTRL_SHADOWED_MODE_OFFSET;
      AES_CTRL_SHADOWED_KEY_LEN_MASK; AES_CTRL_SHADOWED_KEY_LEN_OFFSET] in
    ("b2_aes_init",
     ([aes_cfg_operation; aes_cfg_mode; aes_cfg_key_len] ++ constants,
      [], bedrock_func_body:(
      cfg_val = ((aes_cfg_operation << AES_CTRL_SHADOWED_OPERATION) |
                 ((aes_cfg_mode & AES_CTRL_SHADOWED_MODE_MASK)
                    << AES_CTRL_SHADOWED_MODE_OFFSET) |
                 ((aes_cfg_key_len & AES_CTRL_SHADOWED_KEY_LEN_MASK)
                   << AES_CTRL_SHADOWED_KEY_LEN_OFFSET)) ;
      output! REG32_SET ( AES_CTRL_SHADOWED_0, cfg_val ) ;
      output! REG32_SET ( AES_CTRL_SHADOWED_0, cfg_val )
    ))).
End Impl.

Global Instance common_h_impl : common_h :=
  { REG32_SET := "MMIOWRITE" }. (* FIXME: this is for compatibility with fe310csemantics *)

(* prefix constant names with underscores to avoid name collisions *)
Global Instance aes_regs_h_impl : aes_regs_h :=
  { AES_CTRL_SHADOWED_0 := "_AES_CTRL_SHADOWED_0";
    AES_CTRL_SHADOWED_OPERATION := "_AES_CTRL_SHADOWED_OPERATION";
    AES_CTRL_SHADOWED_MODE_MASK := "_AES_CTRL_SHADOWED_MODE_MASK";
    AES_CTRL_SHADOWED_MODE_OFFSET := "_AES_CTRL_SHADOWED_MODE_OFFSET";
    AES_CTRL_SHADOWED_KEY_LEN_MASK := "_AES_CTRL_SHADOWED_KEY_LEN_MASK";
    AES_CTRL_SHADOWED_KEY_LEN_OFFSET := "_AES_CTRL_SHADOWED_KEY_LEN_OFFSET";
  }.

Compute c_module [aes_init].
Redirect "aes_init.c" Compute c_module [aes_init].
